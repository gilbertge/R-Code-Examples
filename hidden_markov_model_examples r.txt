## Set the CRAN mirror site for downloading of all packages
## Find the URL of the mirror using the "getCRANmirrors()"
## command. Set the URL using the "options(repos="URL")"
   options(repos="http://lib.stat.cmu.edu/R/CRAN/")

## Install and update the required packages used
   myPackages <- c("flexmix")
   install.packages(myPackages,dependencies=TRUE)
   update.packages(checkBuilt=TRUE, ask=FALSE)

## library(package) and require(package) both load the package
## with name package. require is designed for use inside other functions
   library("flexmix")

year        <- c(1900:2006)

count       <- c(13, 14,  8, 10, 16, 26, 32, 27, 18, 32, 36, 24, 22, 23, 22, 18, 25, 21, 21, 14,
                  8, 11, 14, 23, 18, 17, 19, 20, 22, 19, 13, 26, 13, 14, 22, 24, 21, 22, 26, 21,
                 23, 24, 27, 41, 31, 27, 35, 26, 28, 36, 39, 21, 17, 22, 17, 19, 15, 34, 10, 15,
                 22, 18, 15, 20, 15, 22, 19, 16, 30, 27, 29, 23, 20, 16, 21, 21, 25, 16, 18, 15,
                 18, 14, 10, 15,  8, 15,  6, 11,  8,  7, 18, 16, 13, 12, 13, 20, 15, 16, 12, 18,
                 15, 16, 13, 15, 16, 11, 11)

frequencies <- count/sum(count)
frequencies

earthquakes <- as.data.frame(cbind(year, count, frequencies))

plot(earthquakes$year, earthquakes$count, 
     type="b",
     pch=20,
     ylim=c(0,50),
     ylab="Count",
     xlab="Year"
    )
axis(1, at=seq(1900, 2000, 10))

#########################################
#              BAR PLOT p 6             #
#########################################
x <- c(1:45)
y <- dpois(x, lambda=19)
plot(x, 
     y, 
     type="p",
     pch=20,
     ylim=c(0,0.10),
     ylab=" ",
     xlab=" "
    )

freq <-table(earthquakes$count)
freq
quake.number <- c(6:8, 10:32, 34:36, 39, 41)
quake.number

rel.freq <- table(earthquakes$count)/nrow(earthquakes)
rel.freq

segments(quake.number, rel.freq,
         quake.number, 0
        )


## Create a starting value to be placed in the expression
## to calculate the log L estimate.
lambda <- mean(earthquakes$count)
delta  <- 1


## Calculate the log likelihood estimate of the 
## earthquake data
logL <- sum(log(outer(x,lambda,dpois)%*%delta))
logL


## Create a function that will maximize the logL
## estimate of the POISSON distribution
mlogl <- function(l, x) {
         sum(-dpois(x, l, log=TRUE))
         }

## Use the NLM package to maximize the logL -
## actually, NLM minimizes an expression which is
## why we take the NEGATIVE of the above expression,
## thus having the effect of NLM finding the maximum
out <- nlm(mlogl, lambda, earthquakes$count)
mu.hat <- out$estimate
mu.hat

## Calculate the negative logL of the expression
neg.logL <- -sum(log(outer(count,lambda,dpois)%*%delta))
neg.logL



rpois.mixture2 <- function(n, prob=0.5, lambda1, lambda2){
                     u   <- runif(n)
                     out <- numeric(n)
                     for(i in 1:n) out[i] <- if(u[i] < prob) rpois(1, lambda1) 
                        else rpois(1, lambda2)
                     out
                  }

dsn2 <- rpois.mixture2(107, prob=0.676, lambda1=15.777, lambda2=26.840)

neg.logL2 <- -sum(log(outer(dsn2,lambda,dpois)%*%delta))
neg.logL2

hist(rpois.mixture2(107, prob=0.676, lambda1=15.777, lambda2=26.840)) 

rpois.mixture3 <- function(n, prob1, prob2, lambda1, lambda2, lambda3){
                     u   <- runif(n)
                     out <- numeric(n)
                     for(i in 1:n) out[i] <- if(u[i] < prob1) rpois(1, lambda1)
                        else if(u[i] >= prob1 & u[i] < prob2) rpois(1, lambda2)
                        else rpois(1, lambda3)
                     out
                  }

dsn3 <- rpois.mixture3(107, prob1=0.278, prob2=0.593, 
                        lambda1=12.736, lambda2=19.785, lambda3=31.629)


neg.logL3 <- -sum(log(outer(dsn3,lambda,dpois)%*%delta))
neg.logL3

rpois.mixture4 <- function(n, prob1, prob2, prob3, lambda1, lambda2, lambda3, lambda4){
                     u   <- runif(n)
                     out <- numeric(n)
                     for(i in 1:n) out[i] <- if(u[i] < prob1) rpois(1, lambda1)
                        else if(u[i] >= prob1 & u[i] < prob2) rpois(1, lambda2)
                        else if(u[i] >= prob2 & u[i] < prob3) rpois(1, lambda3)
                        else rpois(1, lambda4)
                     out
                  }

dsn4 <- rpois.mixture4(107, prob1=0.093, prob2=0.354, prob3=0.437,
                        lambda1=10.584, lambda2=15.528, lambda3=20.969, lambda4=32.079)

neg.logL4 <- -sum(log(outer(dsn4,lambda,dpois)%*%delta))
neg.logL4






