librar("knitr")
library("knitr")
help(kable)
install.packages("rHealthDataGov", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
## Load rHealthDataGov package for example data
library("rHealthDataGov")
df <- fetch_healthdata(resource="hosp", filter=list(addr_city="SAN FRANCISCO"))
names(df)
df <- fetch_healthdata(resource="hosp", filter=list(addr_city="NEW YORK"))
library("jsonlite")
library("httr")
raw <- fromJSON("http://catalog.data.gov/dataset/medicare-hospital-spending-by-claim-61b57/resource/01381ed2-38cb-4813-afeb-014425ed070a")
names(raw())
names(raw)
raw <- fromJSON("https://data.medicare.gov/api/views/nrth-mfg3/rows.json?accessType=DOWNLOAD")
names(raw)
head(raw)
library("RJSONIO")
json_file  <- fromJSON("https://data.medicare.gov/api/views/nrth-mfg3/rows.json?accessType=DOWNLOAD")
##json_data  <- fromJSON(json_file)
json_data1 <- lapply(json_data, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
json_data1 <- lapply(json_file, function(x) {
x[sapply(x, is.null)] <- NA
unlist(x)
})
names(json_data1)
install.packages("tidyjson")
library("jsonlite")
library("httr")
library("tidyjson")
url <- "https://data.medicare.gov/api/views/nrth-mfg3/rows.json?accessType=DOWNLOAD"
##json_file  <- fromJSON(url)
jsonlite::fromJSON(url, simplifyDataFrame = TRUE)
json_file  <- jsonlite::fromJSON(url, simplifyDataFrame = TRUE)
names(json_file)
json_file[[1]]
str(json_file)
str(json_file)
df <- json_file %>%
gather_array %>%                                     # stack the users
spread_values(medicare_id = jstring("id")) %>%       # extract the ID
spread_values(hosp_id = jstring("name")) %>%         # extract the HOSPITAL NAME
spread_values(group = jstring("category")) %>%       # extract the CATEGORY
) %>%
select(medicare_id, hosp_id, group) # select only what is needed
df <- json_file %>%
gather_array %>%                                     # stack the users
spread_values(medicare_id = jstring("id")) %>%       # extract the ID
spread_values(hosp_id = jstring("name")) %>%         # extract the HOSPITAL NAME
spread_values(group = jstring("category")) %>%       # extract the CATEGORY
%>%
select(medicare_id, hosp_id, group) # select only what is needed
library(tidyjson)
df <- json_file %>%
gather_array %>%                                     # stack the users
spread_values(medicare_id = jstring("id")) %>%       # extract the ID
spread_values(hosp_id = jstring("name")) %>%         # extract the HOSPITAL NAME
spread_values(group = jstring("category")) %>%       # extract the CATEGORY
%>%
select(medicare_id, hosp_id, group) # select only what is needed
library("rHealthDataGov")
df <- fetch_healthdata(resource="hosp", filter=list(addr_city="SAN FRANCISCO"))
help("update.packages")
update.packages("rHealthDataGov")
update.packages("rHealthDataGov")
install.packages(c("mgcv", "Rfacebook", "rmarkdown"), lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
df <- fetch_healthdata()
data(resources)
head(resources[,1:2])
names(resources)
nrow(resources)
resources
df <- fetch_healthdata(resource="os", filter=list(addr_city="SAN FRANCISCO"))
df <- fetch_healthdata(resource="os"
)
# Retrieve data from the healthdata.gov data API.
# More info here: http://www.healthdata.gov/data-api
.construct_json_string <- function(resource_id, filter, offset = 0){
# This constructs the initial json string for a query with a given filter set
if (!is.null(filter)){
filter_vec <- mapply(names(filter), filter, FUN=function(k,v) sprintf('"%s": "%s"', k, v))
filter_str <- sprintf('{%s}', paste(filter_vec, collapse=","))
jsontext <- sprintf('{"resource_id": "%s","filters": %s, "offset": %s}', resource_id, filter_str, offset)
} else {
jsontext <- sprintf('{"resource_id": "%s", "offset": %s}', resource_id, offset)  #no filter
}
return(jsontext)
}
.quick_fetch <- function(jsontext) {
# This will fetch results, but will be limited by the API at max = 100 results
api_url <- "http://hub.Healthdata.gov/api/action/datastore_search"
req <- httr::POST(api_url, body = jsontext, httr::add_headers("Content-type" = "application/json"))
if (req$status_code >= 400) {
stop(sprintf("HealthData.gov API returned an error: HTTP status code %s, %s", req$status_code, req$headers$statusmessage))
}
httr::stop_for_status(req)
reslist <- httr::content(req, "parsed")
if (!reslist$success) stop("HealthData.gov API returned an error.")
if (length(reslist$result$records) == 0) stop("Zero records match your filter. Nothing to return.\n See the 'filters' data object from this package for valid filter values.")
return(reslist)
}
.fetch_results <- function(jsontext, resource_id, filter) {
# Fetch the first batch of results (limit 100 records)
reslist <- .quick_fetch(jsontext)
total_records <- reslist$result$total  #Total number of records that match the query
records <- reslist$result$records  #Records returned by API call
field_names <- sapply(reslist$result$fields, function(x) x$id)  #Field names
field_types <- sapply(reslist$result$fields, function(x) x$type)  #Corresponding field types
# If you have not yet retrieved all records, calculate the # of remaining calls required
extra_calls <- ifelse((length(records) < total_records), floor(total_records/length(records)), 0)
if (extra_calls > 0){
# Might update the following to an apply or parSapply function (with a new parallel=TRUE arg)
all_records <- list(records)
for (i in seq(extra_calls)) {
# Keep making API requests with an increasing offset value until you get all the records
# Append new records to existing `records` list
api_hardlimit <- 100  #healthdata.gov has a hard limit of 100 records per request
jsontext <- .construct_json_string(resource_id = resource_id, filter = filter, offset = api_hardlimit*i)
all_records[[i+1]] <- .quick_fetch(jsontext)$result$records
}
records <- unlist(all_records, recursive = FALSE)
}
# Replace NULL with NA so we can convert into a data.frame
records <- lapply(records, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df <- data.frame(matrix(unlist(records), nrow = length(records), byrow = TRUE), stringsAsFactors = FALSE)
names(df) <- names(records[[1]])
# Convert column types
for (col in names(df)){
field_type <- field_types[which(field_names == col)]
if (field_type == "numeric"){
df[[col]] <- as.numeric(df[[col]])
} else if (field_type == "int4"){
df[[col]] <- as.integer(df[[col]])
} else if (field_type == "int8"){
df[[col]] <- bit64::as.integer64(df[[col]])
} else if (field_type == "timestamp"){
df[[col]] <- as.POSIXct(df[[col]], tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
} else if (field_type != "text"){
print(sprintf("Unknown field type: %s", field_type))
}
}
return(df)
}
fetch_healthdata <- function(resource = "hosp", filter = NULL) {
# Return a data.frame of the records that match your query
resource_id <- resources$resource_id[which(resources$resource==resource)]
if (length(resource_id)==0) {
stop("This resource does not exist.  Please input a character string that is one of the resources$resource labels.")
}
if (!is.null(filter)) {
bad_filter_names <- sapply(names(filter), function(x) !(x %in% names(filters[[resource]])))
if (sum(bad_filter_names)>0) {
baddies <- paste(names(filter)[bad_filter_names], collapse = ", ")
stop(paste("The following filter name(s) do not exist for this resource", baddies, sep = ": "))
}
}
jsontext <- .construct_json_string(resource_id = resource_id, filter = filter, offset = 0)
df <- .fetch_results(jsontext = jsontext, resource_id = resource_id, filter = filter)
return(df)
}
# Retrieve data from the healthdata.gov data API.
# More info here: http://www.healthdata.gov/data-api
.construct_json_string <- function(resource_id, filter, offset = 0){
# This constructs the initial json string for a query with a given filter set
if (!is.null(filter)){
filter_vec <- mapply(names(filter), filter, FUN=function(k,v) sprintf('"%s": "%s"', k, v))
filter_str <- sprintf('{%s}', paste(filter_vec, collapse=","))
jsontext <- sprintf('{"resource_id": "%s","filters": %s, "offset": %s}', resource_id, filter_str, offset)
} else {
jsontext <- sprintf('{"resource_id": "%s", "offset": %s}', resource_id, offset)  #no filter
}
return(jsontext)
}
.quick_fetch <- function(jsontext) {
# This will fetch results, but will be limited by the API at max = 100 results
api_url <- "http://hub.Healthdata.gov/api/action/datastore_search"
req <- httr::POST(api_url, body = jsontext, httr::add_headers("Content-type" = "application/json"))
if (req$status_code >= 400) {
stop(sprintf("HealthData.gov API returned an error: HTTP status code %s, %s", req$status_code, req$headers$statusmessage))
}
httr::stop_for_status(req)
reslist <- httr::content(req, "parsed")
if (!reslist$success) stop("HealthData.gov API returned an error.")
if (length(reslist$result$records) == 0) stop("Zero records match your filter. Nothing to return.\n See the 'filters' data object from this package for valid filter values.")
return(reslist)
}
.fetch_results <- function(jsontext, resource_id, filter) {
# Fetch the first batch of results (limit 100 records)
reslist <- .quick_fetch(jsontext)
total_records <- reslist$result$total  #Total number of records that match the query
records <- reslist$result$records  #Records returned by API call
field_names <- sapply(reslist$result$fields, function(x) x$id)  #Field names
field_types <- sapply(reslist$result$fields, function(x) x$type)  #Corresponding field types
# If you have not yet retrieved all records, calculate the # of remaining calls required
extra_calls <- ifelse((length(records) < total_records), floor(total_records/length(records)), 0)
if (extra_calls > 0){
# Might update the following to an apply or parSapply function (with a new parallel=TRUE arg)
all_records <- list(records)
for (i in seq(extra_calls)) {
# Keep making API requests with an increasing offset value until you get all the records
# Append new records to existing `records` list
api_hardlimit <- 100  #healthdata.gov has a hard limit of 100 records per request
jsontext <- .construct_json_string(resource_id = resource_id, filter = filter, offset = api_hardlimit*i)
all_records[[i+1]] <- .quick_fetch(jsontext)$result$records
}
records <- unlist(all_records, recursive = FALSE)
}
# Replace NULL with NA so we can convert into a data.frame
records <- lapply(records, function(x) lapply(x, function(x) ifelse(is.null(x), NA, x)))
df <- data.frame(matrix(unlist(records), nrow = length(records), byrow = TRUE), stringsAsFactors = FALSE)
names(df) <- names(records[[1]])
# Convert column types
for (col in names(df)){
field_type <- field_types[which(field_names == col)]
if (field_type == "numeric"){
df[[col]] <- as.numeric(df[[col]])
} else if (field_type == "int4"){
df[[col]] <- as.integer(df[[col]])
} else if (field_type == "int8"){
df[[col]] <- bit64::as.integer64(df[[col]])
} else if (field_type == "timestamp"){
df[[col]] <- as.POSIXct(df[[col]], tz = "UTC", format = "%Y-%m-%dT%H:%M:%S")
} else if (field_type != "text"){
print(sprintf("Unknown field type: %s", field_type))
}
}
return(df)
}
fetch_healthdata <- function(resource = "hosp", filter = NULL) {
# Return a data.frame of the records that match your query
resource_id <- resources$resource_id[which(resources$resource==resource)]
if (length(resource_id)==0) {
stop("This resource does not exist.  Please input a character string that is one of the resources$resource labels.")
}
if (!is.null(filter)) {
bad_filter_names <- sapply(names(filter), function(x) !(x %in% names(filters[[resource]])))
if (sum(bad_filter_names)>0) {
baddies <- paste(names(filter)[bad_filter_names], collapse = ", ")
stop(paste("The following filter name(s) do not exist for this resource", baddies, sep = ": "))
}
}
jsontext <- .construct_json_string(resource_id = resource_id, filter = filter, offset = 0)
df <- .fetch_results(jsontext = jsontext, resource_id = resource_id, filter = filter)
return(df)
}
fetch_healthdata
fetch_healthdata()
fetch_healthdata(resource="hosp")
fetch_healthdata(resource="HOSP")
library("rHealthDataGov")
df <- fetch_healthdata(resource="HOSP", filter=list(addr_city="SAN FRANCISCO"))
df <- fetch_healthdata(resource="HOSP"
)
names(resources)
resources
df <- fetch_healthdata(resource="ahrqn")
install.packages("datasets", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("datasets", lib = "/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
data(esoph)
head(esoph)
head(esoph)
head(infert)
## Load plyr package for grouped descritptive statistics
library("plyr")
ddply(infert, c("education"), age,
n      = length(written),
mean   = round(mean(written, na.rm=TRUE), digit=1),
se     = round(sd(written, na.rm=TRUE) / sqrt(length(written)), digit=2),
median = round(median(written, na.rm=TRUE), digit=1),
iqr    = IQR(written, na.rm=TRUE),
max    = max(written, na.rm=TRUE),
min    = min(written, na.rm=TRUE)
)
## Load plyr package for grouped descritptive statistics
library("plyr")
ddply(infert, c("education"), age,
n      = length(written),
mean   = round(mean(written, na.rm=TRUE), digit=1),
se     = round(sd(written, na.rm=TRUE) / sqrt(length(written)), digit=2),
median = round(median(written, na.rm=TRUE), digit=1),
iqr    = IQR(written, na.rm=TRUE),
max    = max(written, na.rm=TRUE),
min    = min(written, na.rm=TRUE)
)
ddply(infert, c("education"), infert$age,
n      = length(written),
mean   = round(mean(written, na.rm=TRUE), digit=1),
se     = round(sd(written, na.rm=TRUE) / sqrt(length(written)), digit=2),
median = round(median(written, na.rm=TRUE), digit=1),
iqr    = IQR(written, na.rm=TRUE),
max    = max(written, na.rm=TRUE),
min    = min(written, na.rm=TRUE)
)
data(infert)
ddply(infert, c("education"), age,
n      = length(written),
mean   = round(mean(written, na.rm=TRUE), digit=1),
se     = round(sd(written, na.rm=TRUE) / sqrt(length(written)), digit=2),
median = round(median(written, na.rm=TRUE), digit=1),
iqr    = IQR(written, na.rm=TRUE),
max    = max(written, na.rm=TRUE),
min    = min(written, na.rm=TRUE)
)
x<-data(infert)
names(x)
names(infert)
library("psych")
describeBy(infert$age, infert$education, mat = TRUE)
help(describeBy)
help(describe)
ex1 <- as.data.frame(describeBy(infert$age, infert$education, , digits = 2, mat = TRUE))
ex1
head(UKDriverDeaths)
## Website for Random Number Genderation
## http://astrostatistics.psu.edu/datasets/R/Random.html
## Load the package used for exporting SAS data
library("SASxport")
## Set the seed so dta can be reproduced
set.seed(10231995)
## Define how many observations should be generated
n=5000
## This function categorizes age in a fairly flexible way.
## The first assignment to labs inside the function creates
## a vector of labels. Then, the cut function is called to
## do the work, with the custom labels as an argument.
age.cat <- function(x, lower = 0, upper, by = 10,
sep = "-", above.char = "+") {
labs <- c(paste(seq(lower, upper - by, by = by),
seq(lower + by - 1, upper - 1, by = by),
sep = sep),
paste(upper, above.char, sep = ""))
cut(floor(x), breaks = c(seq(lower, upper, by = by), Inf),
right = FALSE, labels = labs)
}
## Set the working directory
setwd("/Users/gregoryegilbert/Documents/r/code examples/data")
## Create the ID variable
id<-seq(from=1, to=n, by=1)
## Create GENDER variable
female <- ifelse(runif(n, min = 0, max = 1) <= .42, 1, 0)
## Create AGE variable
age <- round(rnorm(n, mean=65.7699170, sd=11.0894758), digits=0)
## Create AGE GROUP variable
## Only specifying an upper bound, uses 0 as lower bound, and
## breaks up categories by 10
age.group <- (age.cat(age, upper=100))
## Create random variable RACE variable
randrace <- runif(n, min = 0, max = 1)
nhw   <- ifelse(randrace >=   0 & randrace <=  .73, 1, 0)
nhb   <- ifelse(randrace >  .73 & randrace <=  .86, 1, 0)
asian <- ifelse(randrace >= .86 & randrace <=  .91, 1, 0)
other <- ifelse(randrace >= .91 & randrace <= 1.00, 1, 0)
race  <- ifelse(nhw==1, 1, ifelse(nhb==1, 2, ifelse(asian==1, 3, 4)))
## Create random variable ETHNICITY (HISPANIC) variable
hispanic <- ifelse(runif(n, min = 0, max = 1) <= .37, 1, 0)
## Create HEIGHT variable in inches
height <- round(rnorm(n, mean=69.7, sd=2.8), digits=0)
weight <- round(rnorm(n, mean=196.4, sd=48.2), digits=0)
bmi    <- (weight/(height*height))*703
## Create SMOKING variable
smokes <- ifelse(runif(n, min = 0, max = 1) <= .178, 1, 0)
## Create the random MARITAL STATUS variable
randmstatus <- runif(n, min = 0, max = 1)
marital.status <-  ifelse(randmstatus >=   0 & randmstatus <=  .17, 1, ifelse(randmstatus >=   .17 & randmstatus <=  .26, 2, ifelse(randmstatus >=   .26 & randmstatus <=  .34, 3, ifelse(randmstatus >=   .34 & randmstatus <=  .36, 4, 5))))
## Create the random EMPLOYMENT variable
randemploy <- runif(n, min = 0, max = 1)
employment <-  ifelse(randemploy >=   0 & randemploy <=  .17, 1, ifelse(randemploy >=   .17 &randemploy <=  .26, 2, ifelse(randemploy >=   .26 & randemploy <=  .34, 3, ifelse(randemploy >=   .34 & randemploy <=  .36, 4, 5))))
## Create STATE data
state <- round(50*rbeta(n, 1, 2, ncp = 0)+1, digits=0)
## Create comorbidity data
anemdef      <- ifelse( runif(n, min=0, max=1) <= .08  , 1, 0)
asthma       <- ifelse( runif(n, min=0, max=1) <= .15  , 1, 0)
bipolar      <- ifelse( runif(n, min=0, max=1) <= .04  , 1, 0)
cancer       <- ifelse( runif(n, min=0, max=1) <= .09  , 1, 0)
cbd          <- ifelse( runif(n, min=0, max=1) <= .09  , 1, 0)
chf          <- ifelse( runif(n, min=0, max=1) <= .12  , 1, 0)
chrnlung     <- ifelse( runif(n, min=0, max=1) <= .14  , 1, 0)
copd         <- ifelse( runif(n, min=0, max=1) <= .10  , 1, 0)
depress      <- ifelse( runif(n, min=0, max=1) <= .13  , 1, 0)
diabetes     <- ifelse( runif(n, min=0, max=1) <= .72  , 1, 0)
epilepsy     <- ifelse( runif(n, min=0, max=1) <= .03  , 1, 0)
gad          <- ifelse( runif(n, min=0, max=1) <= .05  , 1, 0)
htn_c        <- ifelse( runif(n, min=0, max=1) <= .14  , 1, 0)
hypothy      <- ifelse( runif(n, min=0, max=1) <= .13  , 1, 0)
perivasc     <- ifelse( runif(n, min=0, max=1) <= .09  , 1, 0)
psych        <- ifelse( runif(n, min=0, max=1) <= .12  , 1, 0)
ptsd         <- ifelse( runif(n, min=0, max=1) <= .11  , 1, 0)
pulmcirc     <- ifelse( runif(n, min=0, max=1) <= .14  , 1, 0)
stroke       <- ifelse( runif(n, min=0, max=1) <= .13  , 1, 0)
substanceuse <- ifelse( runif(n, min=0, max=1) <= .18  , 1, 0)
tbi          <- ifelse( runif(n, min=0, max=1) <= .18  , 1, 0)
tumor        <- ifelse( runif(n, min=0, max=1) <= .13  , 1, 0)
## Create BP data
sbp <- round(rnorm(n, mean=110, sd=16)+40, digits=0)
dbp <- round(rnorm(n, mean= 70, sd=12)+25, digits=0)
map <- (2*dbp+sbp)/3
## Combine the data
demographics <- cbind.data.frame(id,             female,     age,   age.group, race,    hispanic,
height,         weight,     bmi,   smokes,
marital.status, employment, state, anemdef,   asthma,  bipolar,
cancer,         cbd,        chf,   chrnlung,  copd,    depress,
diabetes,       epilepsy,   gad,   htn_c,     hypothy,
perivasc,       psych,      ptsd,  pulmcirc,  stroke,  substanceuse,
tbi,            tumor,      sbp,   dbp,       map
)
## Create longitudinal HbA1c data
time    <- 1
hba1c   <- round(rchisq(n, 2)+5, digits=1)
hba1c.1 <- cbind.data.frame(id, demographics, time, hba1c)
time    <- 2
hba1c   <- round(rf(n, 3, 7)+5, digits=1)
hba1c.2 <- cbind.data.frame(id, demographics, time, hba1c)
time    <- 3
hba1c   <- round(rf(n, 7, 10)+5, digits=1)
hba1c.3 <- cbind.data.frame(id, demographics, time, hba1c)
time    <- 4
hba1c   <- round(rf(n, 4, 17)+5, digits=1)
hba1c.4 <-cbind.data.frame(id, demographics, time, hba1c)
time    <- 5
hba1c   <- round(rf(n, 7, 14)+5, digits=1)
hba1c.5 <- cbind.data.frame(id, demographics, time, hba1c)
sham_data <- rbind.data.frame(hba1c.1, hba1c.2, hba1c.3, hba1c.4, hba1c.5)
## Write the data to a CSV file
write.csv(sham_data, file = "sham data.csv")
## Create a SAS XPORT file
write.xport(sham_data, file="sham data.xpt")
## Save ama object for faster access
saveRDS(sham_data, "sham_data.rds")
names(sham_data)
library("psych")
ex2 <- as.data.frame(describeBy(sham$map, sham$age.group, , digits = 2, mat = TRUE))
## Set the working directory
setwd("/Users/gregoryegilbert/Documents/r/code examples/data")
## Read in R object
sham <- readRDS("sham_data.rds")
ex2 <- as.data.frame(describeBy(sham$map, sham$age.group, , digits = 2, mat = TRUE))
table(sham$age.group)
mean(sham$map)
## Set the working directory
setwd("/Users/gregoryegilbert/Documents/r/code examples/data")
## Read in R object
sham <- readRDS("sham_data.rds")
ex2 <- as.data.frame(describeBy(sham$map, sham$age.group, , digits = 2, mat = TRUE, na.rm=TRUE))
describe(sham$map)
nrow(sham)
x<-describeBy(sham$map, sham$age.group, , digits = 2, mat = TRUE, na.rm=TRUE)
x<-describeBy(sham$map, sham$age.group, digits = 2, mat = TRUE, na.rm=TRUE)
ex2 <- as.data.frame(describeBy(sham$map, sham$age.group, digits = 2, mat = TRUE))
describeBy(sham$map, sham$age.group, mat=TRUE)
describeBy(sham$map, sham$age.group, mat=TRUE, na.rm=TRUE)
describeBy(sham$map, sham$age.group, mat=TRUE, na.rm=TRUE)
